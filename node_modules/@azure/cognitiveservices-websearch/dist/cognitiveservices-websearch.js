/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesWebsearch = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var QueryContext = {
        serializedName: "QueryContext",
        type: {
            name: "Composite",
            className: "QueryContext",
            modelProperties: {
                originalQuery: {
                    required: true,
                    serializedName: "originalQuery",
                    type: {
                        name: "String"
                    }
                },
                alteredQuery: {
                    readOnly: true,
                    serializedName: "alteredQuery",
                    type: {
                        name: "String"
                    }
                },
                alterationOverrideQuery: {
                    readOnly: true,
                    serializedName: "alterationOverrideQuery",
                    type: {
                        name: "String"
                    }
                },
                adultIntent: {
                    readOnly: true,
                    serializedName: "adultIntent",
                    type: {
                        name: "Boolean"
                    }
                },
                askUserForLocation: {
                    readOnly: true,
                    serializedName: "askUserForLocation",
                    type: {
                        name: "Boolean"
                    }
                },
                isTransactional: {
                    readOnly: true,
                    serializedName: "isTransactional",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var WebMetaTag = {
        serializedName: "Web/MetaTag",
        type: {
            name: "Composite",
            className: "WebMetaTag",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    readOnly: true,
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseBase = {
        serializedName: "ResponseBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "ResponseBase",
            className: "ResponseBase",
            modelProperties: {
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identifiable = {
        serializedName: "Identifiable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Identifiable",
            modelProperties: __assign(__assign({}, ResponseBase.type.modelProperties), { id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Response = {
        serializedName: "Response",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Response",
            modelProperties: __assign(__assign({}, Identifiable.type.modelProperties), { webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Thing = {
        serializedName: "Thing",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Thing",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, url: {
                    readOnly: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }, image: {
                    readOnly: true,
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }, bingId: {
                    readOnly: true,
                    serializedName: "bingId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CreativeWork = {
        serializedName: "CreativeWork",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "CreativeWork",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { thumbnailUrl: {
                    readOnly: true,
                    serializedName: "thumbnailUrl",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Thing"
                            }
                        }
                    }
                }, text: {
                    readOnly: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MediaObject = {
        serializedName: "MediaObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "MediaObject",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { contentUrl: {
                    readOnly: true,
                    serializedName: "contentUrl",
                    type: {
                        name: "String"
                    }
                }, hostPageUrl: {
                    readOnly: true,
                    serializedName: "hostPageUrl",
                    type: {
                        name: "String"
                    }
                }, width: {
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                }, height: {
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ImageObject = {
        serializedName: "ImageObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageObject",
            modelProperties: __assign(__assign({}, MediaObject.type.modelProperties), { thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                } })
        }
    };
    var WebPage = {
        serializedName: "WebPage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "WebPage",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { displayUrl: {
                    readOnly: true,
                    serializedName: "displayUrl",
                    type: {
                        name: "String"
                    }
                }, snippet: {
                    readOnly: true,
                    serializedName: "snippet",
                    type: {
                        name: "String"
                    }
                }, deepLinks: {
                    readOnly: true,
                    serializedName: "deepLinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebPage"
                            }
                        }
                    }
                }, dateLastCrawled: {
                    readOnly: true,
                    serializedName: "dateLastCrawled",
                    type: {
                        name: "String"
                    }
                }, searchTags: {
                    readOnly: true,
                    serializedName: "searchTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebMetaTag"
                            }
                        }
                    }
                }, primaryImageOfPage: {
                    readOnly: true,
                    serializedName: "primaryImageOfPage",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                } })
        }
    };
    var Answer = {
        serializedName: "Answer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Answer",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { followUpQueries: {
                    readOnly: true,
                    serializedName: "followUpQueries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var SearchResultsAnswer = {
        serializedName: "SearchResultsAnswer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "SearchResultsAnswer",
            modelProperties: __assign(__assign({}, Answer.type.modelProperties), { queryContext: {
                    readOnly: true,
                    serializedName: "queryContext",
                    type: {
                        name: "Composite",
                        className: "QueryContext"
                    }
                }, totalEstimatedMatches: {
                    readOnly: true,
                    serializedName: "totalEstimatedMatches",
                    type: {
                        name: "Number"
                    }
                }, isFamilyFriendly: {
                    readOnly: true,
                    serializedName: "isFamilyFriendly",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var WebWebAnswer = {
        serializedName: "Web/WebAnswer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "WebWebAnswer",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebPage"
                            }
                        }
                    }
                }, someResultsRemoved: {
                    readOnly: true,
                    serializedName: "someResultsRemoved",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var Query = {
        serializedName: "Query",
        type: {
            name: "Composite",
            className: "Query",
            modelProperties: {
                text: {
                    required: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                displayText: {
                    readOnly: true,
                    serializedName: "displayText",
                    type: {
                        name: "String"
                    }
                },
                webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                },
                searchLink: {
                    readOnly: true,
                    serializedName: "searchLink",
                    type: {
                        name: "String"
                    }
                },
                thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }
            }
        }
    };
    var Images = {
        serializedName: "Images",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Images",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { nextOffset: {
                    readOnly: true,
                    serializedName: "nextOffset",
                    type: {
                        name: "Number"
                    }
                }, value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageObject"
                            }
                        }
                    }
                }, queryExpansions: {
                    readOnly: true,
                    serializedName: "queryExpansions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                }, similarTerms: {
                    readOnly: true,
                    serializedName: "similarTerms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                }, relatedSearches: {
                    readOnly: true,
                    serializedName: "relatedSearches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var Article = {
        serializedName: "Article",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Article",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { wordCount: {
                    readOnly: true,
                    serializedName: "wordCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var NewsArticle = {
        serializedName: "NewsArticle",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "NewsArticle",
            modelProperties: __assign({}, Article.type.modelProperties)
        }
    };
    var News = {
        serializedName: "News",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "News",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NewsArticle"
                            }
                        }
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RelatedSearchesRelatedSearchAnswer = {
        serializedName: "RelatedSearches/RelatedSearchAnswer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "RelatedSearchesRelatedSearchAnswer",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var SpellSuggestions = {
        serializedName: "SpellSuggestions",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "SpellSuggestions",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var TimeZoneTimeZoneInformation = {
        serializedName: "TimeZone/TimeZoneInformation",
        type: {
            name: "Composite",
            className: "TimeZoneTimeZoneInformation",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    required: true,
                    serializedName: "time",
                    type: {
                        name: "String"
                    }
                },
                utcOffset: {
                    required: true,
                    serializedName: "utcOffset",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TimeZone = {
        serializedName: "TimeZone",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "TimeZone",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { primaryCityTime: {
                    required: true,
                    serializedName: "primaryCityTime",
                    type: {
                        name: "Composite",
                        className: "TimeZoneTimeZoneInformation"
                    }
                }, otherCityTimes: {
                    readOnly: true,
                    serializedName: "otherCityTimes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TimeZoneTimeZoneInformation"
                            }
                        }
                    }
                } })
        }
    };
    var VideoObject = {
        serializedName: "VideoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "VideoObject",
            modelProperties: __assign(__assign({}, MediaObject.type.modelProperties), { motionThumbnailUrl: {
                    readOnly: true,
                    serializedName: "motionThumbnailUrl",
                    type: {
                        name: "String"
                    }
                }, motionThumbnailId: {
                    readOnly: true,
                    serializedName: "motionThumbnailId",
                    type: {
                        name: "String"
                    }
                }, embedHtml: {
                    readOnly: true,
                    serializedName: "embedHtml",
                    type: {
                        name: "String"
                    }
                }, allowHttpsEmbed: {
                    readOnly: true,
                    serializedName: "allowHttpsEmbed",
                    type: {
                        name: "Boolean"
                    }
                }, viewCount: {
                    readOnly: true,
                    serializedName: "viewCount",
                    type: {
                        name: "Number"
                    }
                }, thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, videoId: {
                    readOnly: true,
                    serializedName: "videoId",
                    type: {
                        name: "String"
                    }
                }, allowMobileEmbed: {
                    readOnly: true,
                    serializedName: "allowMobileEmbed",
                    type: {
                        name: "Boolean"
                    }
                }, isSuperfresh: {
                    readOnly: true,
                    serializedName: "isSuperfresh",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var Videos = {
        serializedName: "Videos",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Videos",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VideoObject"
                            }
                        }
                    }
                }, nextOffset: {
                    readOnly: true,
                    serializedName: "nextOffset",
                    type: {
                        name: "Number"
                    }
                }, queryExpansions: {
                    readOnly: true,
                    serializedName: "queryExpansions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                }, relatedSearches: {
                    readOnly: true,
                    serializedName: "relatedSearches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                } })
        }
    };
    var Computation = {
        serializedName: "Computation",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Computation",
            modelProperties: __assign(__assign({}, Answer.type.modelProperties), { expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                }, value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RankingRankingItem = {
        serializedName: "Ranking/RankingItem",
        type: {
            name: "Composite",
            className: "RankingRankingItem",
            modelProperties: {
                answerType: {
                    required: true,
                    serializedName: "answerType",
                    defaultValue: 'WebPages',
                    type: {
                        name: "String"
                    }
                },
                resultIndex: {
                    readOnly: true,
                    serializedName: "resultIndex",
                    type: {
                        name: "Number"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "Identifiable"
                    }
                },
                htmlIndex: {
                    readOnly: true,
                    serializedName: "htmlIndex",
                    type: {
                        name: "Number"
                    }
                },
                textualIndex: {
                    readOnly: true,
                    serializedName: "textualIndex",
                    type: {
                        name: "Number"
                    }
                },
                screenshotIndex: {
                    readOnly: true,
                    serializedName: "screenshotIndex",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RankingRankingGroup = {
        serializedName: "Ranking/RankingGroup",
        type: {
            name: "Composite",
            className: "RankingRankingGroup",
            modelProperties: {
                items: {
                    required: true,
                    serializedName: "items",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RankingRankingItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var RankingRankingResponse = {
        serializedName: "Ranking/RankingResponse",
        type: {
            name: "Composite",
            className: "RankingRankingResponse",
            modelProperties: {
                pole: {
                    readOnly: true,
                    serializedName: "pole",
                    type: {
                        name: "Composite",
                        className: "RankingRankingGroup"
                    }
                },
                mainline: {
                    readOnly: true,
                    serializedName: "mainline",
                    type: {
                        name: "Composite",
                        className: "RankingRankingGroup"
                    }
                },
                sidebar: {
                    readOnly: true,
                    serializedName: "sidebar",
                    type: {
                        name: "Composite",
                        className: "RankingRankingGroup"
                    }
                }
            }
        }
    };
    var SearchResponse = {
        serializedName: "SearchResponse",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "SearchResponse",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { queryContext: {
                    readOnly: true,
                    serializedName: "queryContext",
                    type: {
                        name: "Composite",
                        className: "QueryContext"
                    }
                }, webPages: {
                    readOnly: true,
                    serializedName: "webPages",
                    type: {
                        name: "Composite",
                        className: "WebWebAnswer"
                    }
                }, images: {
                    readOnly: true,
                    serializedName: "images",
                    type: {
                        name: "Composite",
                        className: "Images"
                    }
                }, news: {
                    readOnly: true,
                    serializedName: "news",
                    type: {
                        name: "Composite",
                        className: "News"
                    }
                }, relatedSearches: {
                    readOnly: true,
                    serializedName: "relatedSearches",
                    type: {
                        name: "Composite",
                        className: "RelatedSearchesRelatedSearchAnswer"
                    }
                }, spellSuggestions: {
                    readOnly: true,
                    serializedName: "spellSuggestions",
                    type: {
                        name: "Composite",
                        className: "SpellSuggestions"
                    }
                }, timeZone: {
                    readOnly: true,
                    serializedName: "timeZone",
                    type: {
                        name: "Composite",
                        className: "TimeZone"
                    }
                }, videos: {
                    readOnly: true,
                    serializedName: "videos",
                    type: {
                        name: "Composite",
                        className: "Videos"
                    }
                }, computation: {
                    readOnly: true,
                    serializedName: "computation",
                    type: {
                        name: "Composite",
                        className: "Computation"
                    }
                }, rankingResponse: {
                    readOnly: true,
                    serializedName: "rankingResponse",
                    type: {
                        name: "Composite",
                        className: "RankingRankingResponse"
                    }
                } })
        }
    };
    var Places = {
        serializedName: "Places",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Places",
            modelProperties: __assign(__assign({}, SearchResultsAnswer.type.modelProperties), { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Thing"
                            }
                        }
                    }
                } })
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                },
                subCode: {
                    readOnly: true,
                    serializedName: "subCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                moreDetails: {
                    readOnly: true,
                    serializedName: "moreDetails",
                    type: {
                        name: "String"
                    }
                },
                parameter: {
                    readOnly: true,
                    serializedName: "parameter",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ErrorResponse",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                } })
        }
    };
    var WebWebGrouping = {
        serializedName: "Web/WebGrouping",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "WebWebGrouping",
            className: "WebWebGrouping",
            modelProperties: {
                webPages: {
                    required: true,
                    serializedName: "webPages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebPage"
                            }
                        }
                    }
                },
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Intangible = {
        serializedName: "Intangible",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Intangible",
            modelProperties: __assign({}, Thing.type.modelProperties)
        }
    };
    var StructuredValue = {
        serializedName: "StructuredValue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "StructuredValue",
            modelProperties: __assign({}, Intangible.type.modelProperties)
        }
    };
    var discriminators = {
        'ResponseBase.ImageObject': ImageObject,
        'ResponseBase.WebPage': WebPage,
        'ResponseBase.Web/WebAnswer': WebWebAnswer,
        'ResponseBase.Images': Images,
        'ResponseBase.NewsArticle': NewsArticle,
        'ResponseBase.News': News,
        'ResponseBase.RelatedSearches/RelatedSearchAnswer': RelatedSearchesRelatedSearchAnswer,
        'ResponseBase.SpellSuggestions': SpellSuggestions,
        'ResponseBase.TimeZone': TimeZone,
        'ResponseBase.VideoObject': VideoObject,
        'ResponseBase.Videos': Videos,
        'ResponseBase.Computation': Computation,
        'ResponseBase.Identifiable': Identifiable,
        'ResponseBase.SearchResponse': SearchResponse,
        'ResponseBase.Response': Response,
        'ResponseBase.Thing': Thing,
        'ResponseBase.Places': Places,
        'ResponseBase.SearchResultsAnswer': SearchResultsAnswer,
        'ResponseBase.Answer': Answer,
        'ResponseBase.ErrorResponse': ErrorResponse,
        'Web/WebGrouping': WebWebGrouping,
        'ResponseBase': ResponseBase,
        'ResponseBase.CreativeWork': CreativeWork,
        'ResponseBase.Intangible': Intangible,
        'ResponseBase.MediaObject': MediaObject,
        'ResponseBase.Article': Article,
        'ResponseBase.StructuredValue': StructuredValue
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        QueryContext: QueryContext,
        WebMetaTag: WebMetaTag,
        ResponseBase: ResponseBase,
        Identifiable: Identifiable,
        Response: Response,
        Thing: Thing,
        CreativeWork: CreativeWork,
        MediaObject: MediaObject,
        ImageObject: ImageObject,
        WebPage: WebPage,
        Answer: Answer,
        SearchResultsAnswer: SearchResultsAnswer,
        WebWebAnswer: WebWebAnswer,
        Query: Query,
        Images: Images,
        Article: Article,
        NewsArticle: NewsArticle,
        News: News,
        RelatedSearchesRelatedSearchAnswer: RelatedSearchesRelatedSearchAnswer,
        SpellSuggestions: SpellSuggestions,
        TimeZoneTimeZoneInformation: TimeZoneTimeZoneInformation,
        TimeZone: TimeZone,
        VideoObject: VideoObject,
        Videos: Videos,
        Computation: Computation,
        RankingRankingItem: RankingRankingItem,
        RankingRankingGroup: RankingRankingGroup,
        RankingRankingResponse: RankingRankingResponse,
        SearchResponse: SearchResponse,
        Places: Places,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        WebWebGrouping: WebWebGrouping,
        Intangible: Intangible,
        StructuredValue: StructuredValue,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        Answer: Answer,
        Article: Article,
        Computation: Computation,
        CreativeWork: CreativeWork,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        Identifiable: Identifiable,
        ImageObject: ImageObject,
        Images: Images,
        Intangible: Intangible,
        MediaObject: MediaObject,
        News: News,
        NewsArticle: NewsArticle,
        Places: Places,
        Query: Query,
        QueryContext: QueryContext,
        RankingRankingGroup: RankingRankingGroup,
        RankingRankingItem: RankingRankingItem,
        RankingRankingResponse: RankingRankingResponse,
        RelatedSearchesRelatedSearchAnswer: RelatedSearchesRelatedSearchAnswer,
        Response: Response,
        ResponseBase: ResponseBase,
        SearchResponse: SearchResponse,
        SearchResultsAnswer: SearchResultsAnswer,
        SpellSuggestions: SpellSuggestions,
        StructuredValue: StructuredValue,
        Thing: Thing,
        TimeZone: TimeZone,
        TimeZoneTimeZoneInformation: TimeZoneTimeZoneInformation,
        VideoObject: VideoObject,
        Videos: Videos,
        WebMetaTag: WebMetaTag,
        WebPage: WebPage,
        WebWebAnswer: WebWebAnswer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: [
            "options",
            "acceptLanguage"
        ],
        mapper: {
            serializedName: "Accept-Language",
            type: {
                name: "String"
            }
        }
    };
    var answerCount = {
        parameterPath: [
            "options",
            "answerCount"
        ],
        mapper: {
            serializedName: "answerCount",
            type: {
                name: "Number"
            }
        }
    };
    var clientId = {
        parameterPath: [
            "options",
            "clientId"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientID",
            type: {
                name: "String"
            }
        }
    };
    var clientIp = {
        parameterPath: [
            "options",
            "clientIp"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientIP",
            type: {
                name: "String"
            }
        }
    };
    var count = {
        parameterPath: [
            "options",
            "count"
        ],
        mapper: {
            serializedName: "count",
            type: {
                name: "Number"
            }
        }
    };
    var countryCode = {
        parameterPath: [
            "options",
            "countryCode"
        ],
        mapper: {
            serializedName: "cc",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: 'https://api.cognitive.microsoft.com',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var freshness = {
        parameterPath: [
            "options",
            "freshness"
        ],
        mapper: {
            serializedName: "freshness",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "X-Search-Location",
            type: {
                name: "String"
            }
        }
    };
    var market = {
        parameterPath: [
            "options",
            "market"
        ],
        mapper: {
            serializedName: "mkt",
            defaultValue: 'en-us',
            type: {
                name: "String"
            }
        }
    };
    var offset = {
        parameterPath: [
            "options",
            "offset"
        ],
        mapper: {
            serializedName: "offset",
            type: {
                name: "Number"
            }
        }
    };
    var pragma = {
        parameterPath: [
            "options",
            "pragma"
        ],
        mapper: {
            serializedName: "Pragma",
            type: {
                name: "String"
            }
        }
    };
    var promote = {
        parameterPath: [
            "options",
            "promote"
        ],
        mapper: {
            serializedName: "promote",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var query = {
        parameterPath: "query",
        mapper: {
            required: true,
            serializedName: "q",
            type: {
                name: "String"
            }
        }
    };
    var responseFilter = {
        parameterPath: [
            "options",
            "responseFilter"
        ],
        mapper: {
            serializedName: "responseFilter",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var safeSearch = {
        parameterPath: [
            "options",
            "safeSearch"
        ],
        mapper: {
            serializedName: "safeSearch",
            type: {
                name: "String"
            }
        }
    };
    var setLang = {
        parameterPath: [
            "options",
            "setLang"
        ],
        mapper: {
            serializedName: "setLang",
            type: {
                name: "String"
            }
        }
    };
    var textDecorations = {
        parameterPath: [
            "options",
            "textDecorations"
        ],
        mapper: {
            serializedName: "textDecorations",
            type: {
                name: "Boolean"
            }
        }
    };
    var textFormat = {
        parameterPath: [
            "options",
            "textFormat"
        ],
        mapper: {
            serializedName: "textFormat",
            type: {
                name: "String"
            }
        }
    };
    var userAgent = {
        parameterPath: [
            "options",
            "userAgent"
        ],
        mapper: {
            serializedName: "User-Agent",
            type: {
                name: "String"
            }
        }
    };
    var xBingApisSDK = {
        parameterPath: "xBingApisSDK",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "X-BingApis-SDK",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Web. */
    var Web = /** @class */ (function () {
        /**
         * Create a Web.
         * @param {WebSearchClientContext} client Reference to the service client.
         */
        function Web(client) {
            this.client = client;
        }
        Web.prototype.search = function (query, options, callback) {
            return this.client.sendOperationRequest({
                query: query,
                options: options
            }, searchOperationSpec, callback);
        };
        return Web;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var searchOperationSpec = {
        httpMethod: "GET",
        path: "search",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            answerCount,
            countryCode,
            count,
            freshness,
            market,
            offset,
            promote,
            query,
            responseFilter,
            safeSearch,
            setLang,
            textDecorations,
            textFormat
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            pragma,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        responses: {
            200: {
                bodyMapper: SearchResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-websearch";
    var packageVersion = "3.0.1";
    var WebSearchClientContext = /** @class */ (function (_super) {
        __extends(WebSearchClientContext, _super);
        /**
         * Initializes a new instance of the WebSearchClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function WebSearchClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.endpoint = 'https://api.cognitive.microsoft.com';
            _this.baseUri = "{Endpoint}/bing/v7.0";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            if (options.endpoint !== null && options.endpoint !== undefined) {
                _this.endpoint = options.endpoint;
            }
            return _this;
        }
        return WebSearchClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var WebSearchClient = /** @class */ (function (_super) {
        __extends(WebSearchClient, _super);
        /**
         * Initializes a new instance of the WebSearchClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function WebSearchClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.web = new Web(_this);
            return _this;
        }
        return WebSearchClient;
    }(WebSearchClientContext));

    exports.Web = Web;
    exports.WebSearchClient = WebSearchClient;
    exports.WebSearchClientContext = WebSearchClientContext;
    exports.WebSearchMappers = mappers;
    exports.WebSearchModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-websearch.js.map
